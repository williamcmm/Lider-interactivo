// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para usuarios
model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  firebaseUid String?  @unique // UID de Firebase para autenticación
  role        Role     @default(USER)
  password    String?  // Opcional para usuarios de Firebase
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  notes       Note[]
  sharedNotes SharedNote[]

  @@map("users")
}

// Modelo para seminarios
model Seminar {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  lessons    Lesson[]
  audioFiles AudioFile[]

  @@map("seminars")
}

// Modelo para series
model Series {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  lessons    Lesson[]
  audioFiles AudioFile[]

  @@map("series")
}

// Modelo para lecciones
model Lesson {
  id            String        @id @default(cuid())
  title         String
  content       String        @db.Text
  containerType ContainerType
  order         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relaciones con contenedores
  seminarId String?
  seriesId  String?
  seminar   Seminar? @relation(fields: [seminarId], references: [id], onDelete: Cascade)
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  // Relaciones
  fragments Fragment[]
  notes     Note[]

  // Índices únicos por contenedor
  @@unique([seminarId, order], name: "unique_seminar_lesson_order")
  @@unique([seriesId, order], name: "unique_series_lesson_order")
  @@map("lessons")
}

// Modelo para fragmentos
model Fragment {
  id              String   @id @default(cuid())
  order           Int
  readingMaterial String   @db.Text
  studyAids       String   @default("") @db.Text
  isCollapsed     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relación con lección
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  // Audio de narración opcional
  narrationAudioId String?
  narrationAudio   AudioFile? @relation(fields: [narrationAudioId], references: [id])

  // Relaciones con diapositivas y videos
  slides Slide[]
  videos Video[]
  notes  Note[]

  @@unique([lessonId, order], name: "unique_lesson_fragment_order")
  @@map("fragments")
}

// Modelo para diapositivas
model Slide {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con fragmento
  fragmentId String
  fragment   Fragment @relation(fields: [fragmentId], references: [id], onDelete: Cascade)

  @@unique([fragmentId, order], name: "unique_fragment_slide_order")
  @@map("slides")
}

// Modelo para videos embebidos
model Video {
  id          String   @id @default(cuid())
  title       String
  youtubeId   String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación con fragmento
  fragmentId String
  fragment   Fragment @relation(fields: [fragmentId], references: [id], onDelete: Cascade)

  @@unique([fragmentId, order], name: "unique_fragment_video_order")
  @@map("videos")
}

// Modelo para archivos de audio
model AudioFile {
  id        String    @id @default(cuid())
  name      String
  url       String?
  type      AudioType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones con contenedores
  seminarId String?
  seriesId  String?
  seminar   Seminar? @relation(fields: [seminarId], references: [id], onDelete: Cascade)
  series    Series?  @relation(fields: [seriesId], references: [id], onDelete: Cascade)

  // Relación con fragmentos (para narración)
  fragmentNarrations Fragment[]

  @@map("audio_files")
}

// Modelo para notas
model Note {
  id            String   @id @default(cuid())
  content       String   @db.Text
  contentHtml   String?  @db.Text
  isShared      Boolean  @default(false)
  type          NoteType @default(DIRECT)
  selectedText  String?  @db.Text
  positionStart Int?
  positionEnd   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId String?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  fragmentId String?
  fragment   Fragment? @relation(fields: [fragmentId], references: [id], onDelete: Cascade)

  // Relación con notas compartidas
  sharedNotes SharedNote[]

  @@map("notes")
}

// Modelo para notas compartidas
model SharedNote {
  id            String   @id @default(cuid())
  content       String   @db.Text
  authorName    String
  selectedText  String?  @db.Text
  comment       String?  @db.Text
  lessonTitle   String
  seminarTitle  String
  fragmentOrder Int
  sharedAt      DateTime @default(now())

  // Relaciones
  noteId String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("shared_notes")
}

// Enums
enum Role {
  ADMIN
  USER
}

enum ContainerType {
  SEMINAR
  SERIES
}

enum AudioType {
  LOCAL
  REMOTE
}

enum NoteType {
  DIRECT
  SELECTION
  IMPORTED
}
